
(in-package :clem)

(defmacro def-matrix-move (type-1 type-2)
  (let ((element-type-1 (element-type (find-class `,type-1)))
	(element-type-2 (element-type (find-class `,type-2)))
	(min (minval (find-class `,type-2)))
	(max (maxval (find-class `,type-2))))
    `(progn
       (defmethod matrix-move-range ((m ,type-1) (n ,type-2) startr endr startc endc)
	 (with-matrix-vals (m ,element-type-1 a)
	   (with-matrix-vals (n ,element-type-2 b)
	     (do ((i startr (1+ i)))
		 ((> i endr))
	       (declare (dynamic-extent i) (type fixnum i))
	       (do ((j startc (1+ j)))
		   ((> j endc))
		 (declare (dynamic-extent j) (type fixnum j))
		 (setf (aref b i j)
		       (maybe-truncate
			(aref a i j)
			,element-type-1 ,element-type-2))))))
	 n)
       (defmethod matrix-move-range-constrain ((m ,type-1) (n ,type-2) startr endr startc endc)
	 (with-matrix-vals (m ,element-type-1 a)
	   (with-matrix-vals (n ,element-type-2 b)
	     (do ((i startr (1+ i)))
		 ((> i endr))
	       (declare (dynamic-extent i) (type fixnum i))
	       (do ((j startc (1+ j)))
		   ((> j endc))
		 (declare (dynamic-extent j) (type fixnum j))
		 (setf (aref b i j) ,(if (eql element-type-1 element-type-2)
					 `(constrain ,min (aref a i j) ,max)
					 `(maybe-truncate (constrain ,min (aref a i j) ,max)
							  ,element-type-1 ,element-type-2)))))))
	 n)
       (defmethod matrix-move ((m ,type-1) (n ,type-2) &key constrain)
	 (destructuring-bind (mr mc) (dim m)
	   (cond (constrain
		  (matrix-move-range-constrain m n 0 (1- mr) 0 (1- mc)))
		 (t
		  (matrix-move-range m n 0 (1- mr) 0 (1- mc)))))))))

(defmacro def-matrix-add (type-1 type-2 accumulator-type &key suffix)
  (let ((element-type-1 (element-type (find-class `,type-1)))
	(element-type-2 (element-type (find-class `,type-2)))
	(accumulator-element-type (element-type (find-class `,accumulator-type))))
    `(progn
       (defmethod ,(make-intern (concatenate 'string "mat-add-range" suffix))
	   ((m ,type-1) (n ,type-2) startr endr startc endc)
	 (destructuring-bind (mr mc) (dim m)
	   (let ((p (make-instance ',accumulator-type :rows mr :cols mc)))
	     (with-matrix-vals (m ,element-type-1 a)
	       (with-matrix-vals (n ,element-type-2 b)
		 (with-matrix-vals (p ,accumulator-element-type c)
		   (do ((i startr (1+ i)))
		       ((> i endr))
		     (declare (dynamic-extent i) (type fixnum i))
		     (do ((j startc (1+ j)))
			 ((> j endc))
		       (declare (dynamic-extent j) (type fixnum j))
		       (setf (aref c i j)
			     (+ (aref a i j) (aref b i j))))))))
	     p)))
       
       (defmethod ,(make-intern (concatenate 'string "mat-add" suffix))
	   ((m ,type-1) (n ,type-2))
	 (destructuring-bind (mr mc) (dim m)
	   (,(make-intern (concatenate 'string "mat-add-range" suffix)) m n 0 (1- mr) 0 (1- mc)))))))
       
(defmacro def-matrix-add! (type-1 type-2 accumulator-type &key suffix)
  (declare (ignore accumulator-type))
  (let ((element-type-1 (element-type (find-class `,type-1)))
	(element-type-2 (element-type (find-class `,type-2))))
    `(progn
       (defmethod ,(make-intern (concatenate 'string "mat-add!-range" suffix))
	   ((m ,type-1) (n ,type-2) startr endr startc endc)
	 (with-matrix-vals (m ,element-type-1 a)
	   (with-matrix-vals (n ,element-type-2 b)
	     (do ((i startr (1+ i)))
		 ((> i endr))
	       (declare (dynamic-extent i) (type fixnum i))
	       (do ((j startc (1+ j)))
		   ((> j endc))
		 (declare (dynamic-extent j) (type fixnum j))
		 (setf (aref a i j)
		       (+ (aref a i j) (aref b i j))))))
	   m))
       
       (defmethod ,(make-intern (concatenate 'string "mat-add!" suffix))
	   ((m ,type-1) (n ,type-2))
	 (destructuring-bind (mr mc) (dim m)
	   (,(make-intern (concatenate 'string "mat-add!-range" suffix)) m n 0 (1- mr) 0 (1- mc))))
       
       )))

(defmacro def-matrix-subtr (type-1 type-2 accumulator-type &key suffix)
  (let ((element-type-1 (element-type (find-class `,type-1)))
	(element-type-2 (element-type (find-class `,type-2)))
	(accumulator-element-type (element-type (find-class `,accumulator-type))))
    `(progn
       (defmethod ,(make-intern (concatenate 'string "mat-subtr-range" suffix))
	   ((m ,type-1) (n ,type-2) startr endr startc endc)
	 (destructuring-bind (mr mc) (dim m)
	   (let ((p (make-instance ',accumulator-type :rows mr :cols mc)))
	     (with-matrix-vals (m ,element-type-1 a)
	       (with-matrix-vals (n ,element-type-2 b)
		 (with-matrix-vals (p ,accumulator-element-type c)
		   (do ((i startr (1+ i)))
		       ((> i endr))
		     (declare (dynamic-extent i) (type fixnum i))
		     (do ((j startc (1+ j)))
			 ((> j endc))
		       (declare (dynamic-extent j) (type fixnum j))
		       (setf (aref c i j)
			     (- (aref a i j) (aref b i j))))))))
	     p)))
       
       (defmethod ,(make-intern (concatenate 'string "mat-subtr" suffix))
	   ((m ,type-1) (n ,type-2))
	 (destructuring-bind (mr mc) (dim m)
	   (mat-subtr-range m n 0 (1- mr) 0 (1- mc)))))))

(defmacro def-matrix-subtr! (type-1 type-2 accumulator-type &key suffix)
  (declare (ignore accumulator-type))
  (let ((element-type-1 (element-type (find-class `,type-1)))
	(element-type-2 (element-type (find-class `,type-2))))
    `(progn
       (defmethod ,(make-intern (concatenate 'string "mat-subtr!-range" suffix))
	   ((m ,type-1) (n ,type-2) startr endr startc endc)
	 (with-matrix-vals (m ,element-type-1 a)
	   (with-matrix-vals (n ,element-type-2 b)
	     (do ((i startr (1+ i)))
		 ((> i endr))
	       (declare (dynamic-extent i) (type fixnum i))
	       (do ((j startc (1+ j)))
		   ((> j endc))
		 (declare (dynamic-extent j) (type fixnum j))
		 (setf (aref a i j)
		       (- (aref a i j) (aref b i j))))))
	   m))

       (defmethod ,(make-intern (concatenate 'string "mat-subtr!" suffix))
	   ((m ,type-1) (n ,type-2))
	 (destructuring-bind (mr mc) (dim m)
	   (mat-subtr!-range m n 0 (1- mr) 0 (1- mc)))))))


(macrolet ((frob (type-1 type-2 type-3 &key suffix)
	     `(progn
		(def-move-element ,type-1 ,type-2)
		(def-matrix-move ,type-1 ,type-2)
		(def-matrix-add ,type-1 ,type-2 ,type-3 :suffix ,suffix)
		(def-matrix-add! ,type-1 ,type-2 ,type-3 :suffix ,suffix)
		(def-matrix-subtr ,type-1 ,type-2 ,type-3 :suffix ,suffix)
		(def-matrix-subtr! ,type-1 ,type-2 ,type-3 :suffix ,suffix))))

  (frob double-float-matrix double-float-matrix double-float-matrix)
  (frob double-float-matrix single-float-matrix double-float-matrix)
  (frob double-float-matrix ub8-matrix double-float-matrix)
  (frob double-float-matrix ub16-matrix double-float-matrix)
  (frob double-float-matrix ub32-matrix double-float-matrix)
  (frob double-float-matrix sb8-matrix double-float-matrix)
  (frob double-float-matrix sb16-matrix double-float-matrix)
  (frob double-float-matrix sb32-matrix double-float-matrix)
  (frob double-float-matrix bit-matrix double-float-matrix)
  (frob double-float-matrix fixnum-matrix double-float-matrix)

  (frob single-float-matrix single-float-matrix single-float-matrix)
  (frob single-float-matrix ub8-matrix single-float-matrix)
  (frob single-float-matrix ub16-matrix single-float-matrix)
  (frob single-float-matrix ub32-matrix single-float-matrix)
  (frob single-float-matrix sb8-matrix single-float-matrix)
  (frob single-float-matrix sb16-matrix single-float-matrix)
  (frob single-float-matrix sb32-matrix single-float-matrix)
  (frob single-float-matrix bit-matrix single-float-matrix)
  (frob single-float-matrix fixnum-matrix single-float-matrix)

  (frob ub8-matrix ub8-matrix ub8-matrix)
  (frob ub16-matrix ub16-matrix ub16-matrix)
  (frob ub32-matrix ub32-matrix ub32-matrix)

  (frob ub8-matrix bit-matrix ub8-matrix)
  (frob ub16-matrix bit-matrix ub16-matrix)
  (frob ub32-matrix bit-matrix ub32-matrix)

  (frob sb8-matrix bit-matrix sb8-matrix)
  (frob sb16-matrix bit-matrix sb16-matrix)
  (frob sb32-matrix bit-matrix sb32-matrix)
  
  (frob sb32-matrix ub8-matrix sb32-matrix)
  (frob sb32-matrix ub16-matrix sb32-matrix))

(macrolet ((frob (type-1 type-2 type-3 &key suffix)
	     `(progn
		(def-move-element ,type-1 ,type-2)
		(def-matrix-move ,type-1 ,type-2)
		(def-matrix-add ,type-1 ,type-2 ,type-3 :suffix ,suffix)
		(def-matrix-subtr ,type-1 ,type-2 ,type-3 :suffix ,suffix))))
  (frob single-float-matrix double-float-matrix double-float-matrix)

  (frob ub8-matrix double-float-matrix double-float-matrix)
  (frob ub8-matrix single-float-matrix single-float-matrix)

  (frob ub16-matrix double-float-matrix double-float-matrix)
  (frob ub16-matrix single-float-matrix single-float-matrix)

  (frob ub32-matrix double-float-matrix double-float-matrix)
  (frob ub32-matrix single-float-matrix single-float-matrix)

  (frob sb8-matrix double-float-matrix double-float-matrix)
  (frob sb8-matrix single-float-matrix single-float-matrix)

  (frob sb16-matrix double-float-matrix double-float-matrix)
  (frob sb16-matrix single-float-matrix single-float-matrix)

  (frob sb32-matrix double-float-matrix double-float-matrix)
  (frob sb32-matrix single-float-matrix single-float-matrix)

  (frob fixnum-matrix double-float-matrix double-float-matrix)
  (frob fixnum-matrix single-float-matrix single-float-matrix)

  (frob bit-matrix double-float-matrix double-float-matrix)
  (frob bit-matrix single-float-matrix single-float-matrix))


(macrolet
    ((frob-sum-range (matrix-type accumulator-type)
       (let ((element-type (element-type (find-class matrix-type))))
	 `(defmethod sum-range ((m ,matrix-type) (startr fixnum) (endr fixnum) (startc fixnum) (endc fixnum))
	    (let ((acc (coerce 0 ',accumulator-type))
		  (a (matrix-vals m)))
	      (declare (type ,accumulator-type acc)
		       (type (simple-array ,element-type (* *)) a))
	      (do ((i startr (1+ i)))
		  ((> i endr))
		(declare (dynamic-extent i) (type fixnum i))
		(do ((j startc (1+ j)))
		    ((> j endc))
		  (declare (dynamic-extent j) (type fixnum j))
		  (setf acc (+ acc (aref a i j)))))
	      acc)))))

  (frob-sum-range double-float-matrix double-float)
  (frob-sum-range single-float-matrix single-float)

  (frob-sum-range ub8-matrix (unsigned-byte 32))
  (frob-sum-range ub16-matrix (unsigned-byte 32))
  (frob-sum-range ub32-matrix (unsigned-byte 32))

  (frob-sum-range sb8-matrix (signed-byte 32))
  (frob-sum-range sb16-matrix (signed-byte 32))
  (frob-sum-range sb32-matrix (signed-byte 32))

  (frob-sum-range fixnum-matrix (signed-byte 32))
  (frob-sum-range bit-matrix (signed-byte 32)))


(macrolet
    ((frob-sum-square-range (matrix-type accumulator-type)
       (let ((element-type (element-type (find-class matrix-type))))
	 `(defmethod sum-square-range ((m ,matrix-type) (startr fixnum) (endr fixnum) (startc fixnum) (endc fixnum))
	    (let ((acc (coerce 0 ',accumulator-type))
		  (a (matrix-vals m)))
	      (declare (type ,accumulator-type acc)
		       (type (simple-array ,element-type (* *)) a))
	      (do ((i startr (1+ i)))
		  ((> i endr))
		(declare (dynamic-extent i) (type fixnum i))
		(do ((j startc (1+ j)))
		    ((> j endc))
		  (declare (dynamic-extent j) (type fixnum j))
		  (incf acc (* (aref a i j) (aref a i j)))))
	      acc)))))

  (frob-sum-square-range double-float-matrix double-float)
  (frob-sum-square-range single-float-matrix single-float)

  (frob-sum-square-range ub8-matrix (unsigned-byte 32))
  (frob-sum-square-range ub16-matrix (unsigned-byte 32))
  (frob-sum-square-range ub32-matrix (unsigned-byte 32))

  (frob-sum-square-range sb8-matrix (signed-byte 32))
  (frob-sum-square-range sb16-matrix (signed-byte 32))
  (frob-sum-square-range sb32-matrix (signed-byte 32))

  (frob-sum-square-range fixnum-matrix (signed-byte 32))
  (frob-sum-square-range bit-matrix (signed-byte 32)))


;;; hmmm... maybe we can delte this. I'm tired. check in the morning.
(macrolet
    ((frob-min-range (matrix-type)
       (let ((element-type (element-type (find-class matrix-type))))
	 `(defmethod min-range ((m ,matrix-type) (startr fixnum) (endr fixnum) (startc fixnum) (endc fixnum))
	    (let ((a (matrix-vals m)))
	      (declare (type (simple-array ,element-type (* *)) a))
	      (let ((acc (aref a 0 0)))
		(declare (type ,element-type acc))
		(do ((i startr (1+ i)))
		    ((> i endr))
		  (declare (dynamic-extent i) (type fixnum i))
		  (do ((j startc (1+ j)))
		      ((> j endc))
		    (declare (dynamic-extent j) (type fixnum j))
		    (when (< (aref a i j) acc)
		      (setf acc (aref a i j)))))
		acc))))))
  (frob-min-range double-float-matrix))
