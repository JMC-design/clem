
(in-package :clem)

(defmacro def-matrix-hprod (type-1 type-2 accumulator-type &key suffix)
  (let ((element-type-1 (element-type (find-class `,type-1)))
	(element-type-2 (element-type (find-class `,type-2)))
	(accumulator-element-type (element-type (find-class `,accumulator-type))))
    `(progn
       (defmethod ,(make-intern (concatenate 'string "mat-hprod-range" suffix))
	   ((m ,type-1) (n ,type-2) startr endr startc endc)
	 (destructuring-bind (mr mc) (dim m)
	   (let ((p (make-instance ',accumulator-type :rows mr :cols mc)))
	     (with-matrix-vals (m ,element-type-1 a)
	       (with-matrix-vals (n ,element-type-2 b)
		 (with-matrix-vals (p ,accumulator-element-type c)
		   (do ((i startr (1+ i)))
		       ((> i endr))
		     (declare (dynamic-extent i) (type fixnum i))
		     (do ((j startc (1+ j)))
			 ((> j endc))
		       (declare (dynamic-extent j) (type fixnum j))
		       (setf (aref c i j)
			     (* (aref a i j) (aref b i j))))))))
	     p)))
       
       (defmethod ,(make-intern (concatenate 'string "mat-hprod" suffix))
	   ((m ,type-1) (n ,type-2))
	 (destructuring-bind (mr mc) (dim m)
	   (mat-hprod-range m n 0 (1- mr) 0 (1- mc)))))))

(defmacro def-matrix-hprod! (type-1 type-2 accumulator-type &key suffix)
  (declare (ignore accumulator-type))
  (let ((element-type-1 (element-type (find-class `,type-1)))
	(element-type-2 (element-type (find-class `,type-2))))
    `(progn
       (defmethod ,(make-intern (concatenate 'string "mat-hprod!-range" suffix))
	   ((m ,type-1) (n ,type-2) startr endr startc endc)
	 (with-matrix-vals (m ,element-type-1 a)
	   (with-matrix-vals (n ,element-type-2 b)
	     (do ((i startr (1+ i)))
		 ((> i endr))
	       (declare (dynamic-extent i) (type fixnum i))
	       (do ((j startc (1+ j)))
		   ((> j endc))
		 (declare (dynamic-extent j) (type fixnum j))
		 (setf (aref a i j)
		       (* (aref a i j) (aref b i j))))))
	   m))

       (defmethod ,(make-intern (concatenate 'string "mat-hprod!" suffix))
	   ((m ,type-1) (n ,type-2))
	 (destructuring-bind (mr mc) (dim m)
	   (mat-hprod!-range m n 0 (1- mr) 0 (1- mc)))))))

(macrolet ((frob (type-1 type-2 type-3 &key suffix)
	     `(progn
		(def-matrix-hprod ,type-1 ,type-2 ,type-3 :suffix ,suffix)
		(def-matrix-hprod! ,type-1 ,type-2 ,type-3 :suffix ,suffix))))
  (frob double-float-matrix double-float-matrix double-float-matrix)
  (frob double-float-matrix single-float-matrix double-float-matrix)
  (frob double-float-matrix unsigned-byte-matrix double-float-matrix)
  (frob double-float-matrix unsigned-word-matrix double-float-matrix)
  (frob double-float-matrix unsigned-long-matrix double-float-matrix)
  (frob double-float-matrix signed-byte-matrix double-float-matrix)
  (frob double-float-matrix signed-word-matrix double-float-matrix)
  (frob double-float-matrix signed-long-matrix double-float-matrix)
  (frob double-float-matrix fixnum-matrix double-float-matrix)
  (frob double-float-matrix bit-matrix double-float-matrix))
