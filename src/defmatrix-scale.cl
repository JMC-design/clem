
(in-package :clem)

(defmacro def-matrix-scale (type-1 accumulator-type &key suffix)
  (let ((element-type-1 (element-type (find-class `,type-1)))
	(accumulator-element-type (element-type (find-class `,accumulator-type))))
    `(progn
       (defmethod ,(make-intern (concatenate 'string "mat-scale-range" suffix))
	   ((m ,type-1) q startr endr startc endc)
	 (declare (type ,element-type-1 q))
	 (destructuring-bind (mr mc) (dim m)
	   (let ((p (make-instance ',accumulator-type :rows mr :cols mc)))
	     (with-matrix-vals (m ,element-type-1 a)
	       (with-matrix-vals (p ,accumulator-element-type c)
		 (do ((i startr (1+ i)))
		     ((> i endr))
		   (declare (dynamic-extent i) (type fixnum i))
		   (do ((j startc (1+ j)))
		       ((> j endc))
		     (declare (dynamic-extent j) (type fixnum j))
		     (setf (aref c i j) (* (aref a i j) q))))))
	     p)))
       
       (defmethod ,(make-intern (concatenate 'string "mat-scale" suffix))
	   ((m ,type-1) q)
	 (destructuring-bind (mr mc) (dim m)
	   (,(make-intern (concatenate 'string "mat-scale-range" suffix)) m q 0 (1- mr) 0 (1- mc)))))))

(defmacro def-matrix-scale! (type-1 &key suffix)
  (let ((element-type-1 (element-type (find-class `,type-1))))
    `(progn
       (defmethod ,(make-intern (concatenate 'string "mat-scale-range!" suffix))
	   ((m ,type-1) q startr endr startc endc)
	 (declare (type ,element-type-1 q))
	 (with-matrix-vals (m ,element-type-1 a)
	   (do ((i startr (1+ i)))
	       ((> i endr))
	     (declare (dynamic-extent i) (type fixnum i))
	     (do ((j startc (1+ j)))
		 ((> j endc))
	       (declare (dynamic-extent j) (type fixnum j))
	       (setf (aref a i j) (* (aref a i j) q)))))
	 m)
       
       (defmethod ,(make-intern (concatenate 'string "mat-scale!" suffix))
	   ((m ,type-1) q)
	 (destructuring-bind (mr mc) (dim m)
	   (,(make-intern (concatenate 'string "mat-scale-range!" suffix)) m q 0 (1- mr) 0 (1- mc)))))))

(macrolet ((frob (type-1 type-3 &key suffix)
	     `(progn
		(def-matrix-scale ,type-1 ,type-3 :suffix ,suffix)
		(def-matrix-scale! ,type-1 :suffix ,suffix))))
  (frob double-float-matrix double-float-matrix)
  (frob single-float-matrix single-float-matrix)
  (frob unsigned-byte-matrix unsigned-byte-matrix)
  (frob unsigned-word-matrix unsigned-word-matrix)
  (frob unsigned-long-matrix unsigned-long-matrix)
  (frob signed-byte-matrix signed-byte-matrix)
  (frob signed-word-matrix signed-word-matrix)
  (frob signed-long-matrix signed-long-matrix)
  (frob bit-matrix bit-matrix)
  (frob fixnum-matrix fixnum-matrix))

